package org.insightcentre.converter.impl.protegen.methylation.impl;



import java.util.Collection;

import org.insightcentre.converter.impl.protegen.methylation.impl.impl.DefaultChromosome;
import org.insightcentre.converter.impl.protegen.methylation.impl.impl.DefaultGene_Name;
import org.insightcentre.converter.impl.protegen.methylation.impl.impl.DefaultMethylation;
import org.protege.owl.codegeneration.CodeGenerationFactory;
import org.protege.owl.codegeneration.WrappedIndividual;
import org.protege.owl.codegeneration.impl.FactoryHelper;
import org.protege.owl.codegeneration.impl.ProtegeJavaMapping;
import org.protege.owl.codegeneration.inference.CodeGenerationInference;
import org.protege.owl.codegeneration.inference.SimpleInference;
import org.semanticweb.owlapi.model.OWLClass;
import org.semanticweb.owlapi.model.OWLOntology;
import org.semanticweb.owlapi.model.OWLOntologyStorageException;

/**
 * A class that serves as the entry point to the generated code providing access
 * to existing individuals in the ontology and the ability to create new individuals in the ontology.<p>
 * 
 * Generated by Protege (http://protege.stanford.edu).<br>
 * Source Class: CosmicCompleteDifferentialMethylationFactory<br>
 * @version generated on Sat Oct 31 12:49:53 GMT 2015 by pc
 */
public class CosmicCompleteDifferentialMethylationFactory implements CodeGenerationFactory {
    private OWLOntology ontology;
    private ProtegeJavaMapping javaMapping = new ProtegeJavaMapping();
    private FactoryHelper delegate;
    private CodeGenerationInference inference;

    public CosmicCompleteDifferentialMethylationFactory(OWLOntology ontology) {
	    this(ontology, new SimpleInference(ontology));
    }
    
    public CosmicCompleteDifferentialMethylationFactory(OWLOntology ontology, CodeGenerationInference inference) {
        this.ontology = ontology;
        this.inference = inference;
        javaMapping.initialize(ontology, inference);
        delegate = new FactoryHelper(ontology, inference);
    }

    public OWLOntology getOwlOntology() {
        return ontology;
    }
    
    public void saveOwlOntology() throws OWLOntologyStorageException {
        ontology.getOWLOntologyManager().saveOntology(ontology);
    }
    
    public void flushOwlReasoner() {
        delegate.flushOwlReasoner();
    }
    
    public boolean canAs(WrappedIndividual resource, Class<? extends WrappedIndividual> javaInterface) {
    	return javaMapping.canAs(resource, javaInterface);
    }
    
    public  <X extends WrappedIndividual> X as(WrappedIndividual resource, Class<? extends X> javaInterface) {
    	return javaMapping.as(resource, javaInterface);
    }
    
    public Class<?> getJavaInterfaceFromOwlClass(OWLClass cls) {
        return javaMapping.getJavaInterfaceFromOwlClass(cls);
    }
    
    public OWLClass getOwlClassFromJavaInterface(Class<?> javaInterface) {
	    return javaMapping.getOwlClassFromJavaInterface(javaInterface);
    }
    
    public CodeGenerationInference getInference() {
        return inference;
    }

    /* ***************************************************
     * Class http://cosmic.sels.insight.org/schema/Methylation#Chromosome
     */

    {
        javaMapping.add("http://cosmic.sels.insight.org/schema/Methylation#Chromosome", Chromosome.class, DefaultChromosome.class);
    }

    /**
     * Creates an instance of type Chromosome.  Modifies the underlying ontology.
     */
    public Chromosome createChromosome(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_CHROMOSOME, DefaultChromosome.class);
    }

    /**
     * Gets an instance of type Chromosome with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Chromosome getChromosome(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_CHROMOSOME, DefaultChromosome.class);
    }

    /**
     * Gets all instances of Chromosome from the ontology.
     */
    public Collection<? extends Chromosome> getAllChromosomeInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_CHROMOSOME, DefaultChromosome.class);
    }


    /* ***************************************************
     * Class http://cosmic.sels.insight.org/schema/Methylation#Gene_Name
     */

    {
        javaMapping.add("http://cosmic.sels.insight.org/schema/Methylation#Gene_Name", Gene_Name.class, DefaultGene_Name.class);
    }

    /**
     * Creates an instance of type Gene_Name.  Modifies the underlying ontology.
     */
    public Gene_Name createGene_Name(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_GENE_NAME, DefaultGene_Name.class);
    }

    /**
     * Gets an instance of type Gene_Name with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Gene_Name getGene_Name(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_GENE_NAME, DefaultGene_Name.class);
    }

    /**
     * Gets all instances of Gene_Name from the ontology.
     */
    public Collection<? extends Gene_Name> getAllGene_NameInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_GENE_NAME, DefaultGene_Name.class);
    }


    /* ***************************************************
     * Class http://cosmic.sels.insight.org/schema/Methylation#Methylation
     */

    {
        javaMapping.add("http://cosmic.sels.insight.org/schema/Methylation#Methylation", Methylation.class, DefaultMethylation.class);
    }

    /**
     * Creates an instance of type Methylation.  Modifies the underlying ontology.
     */
    public Methylation createMethylation(String name) {
		return delegate.createWrappedIndividual(name, Vocabulary.CLASS_METHYLATION, DefaultMethylation.class);
    }

    /**
     * Gets an instance of type Methylation with the given name.  Does not modify the underlying ontology.
     * @param name the name of the OWL named individual to be retrieved.
     */
    public Methylation getMethylation(String name) {
		return delegate.getWrappedIndividual(name, Vocabulary.CLASS_METHYLATION, DefaultMethylation.class);
    }

    /**
     * Gets all instances of Methylation from the ontology.
     */
    public Collection<? extends Methylation> getAllMethylationInstances() {
		return delegate.getWrappedIndividuals(Vocabulary.CLASS_METHYLATION, DefaultMethylation.class);
    }


}
